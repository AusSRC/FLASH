# Load latest ubuntu image and run
sudo docker run -i -t ubuntu:latest /bin/bash

# do basic update:
% apt update && apt upgrade
% apt install curl vim

# Create flash user
% apt install sudo
% adduser flash
# passwd = aussrc
% usermod -aG sudo flash

% exit

# Find images:
% docker ps -l

# commit image:
sudo docker commit bda620a8e5da ubuntu:flash

# Rerun as flash user with host filesystem attached:
sudo docker run -v /mnt/shared/flash_test:/mnt/shared --user flash -it ubuntu:flash

# untar flash tarball:
% cd
% sudo cp -R /mnt/shared/* .
% tar -zxvf flash.tar.gz
% sudo chown -R flash:flash *
% sudo chmod -R a+rx *

# General and PyMultinest dependencies:
% cd PyMultiNest
% apt install python3 python3-scipy python3-pip
% apt install python3-matplotlib
% apt install python3-progressbar
% apt install python3-ipython
% apt install libblas-dev
% apt install liblapack-dev
% apt install libatlas3-base libatlas-base-dev
% apt install cmake
% apt install build-essential git gfortran
% sudo pip3 install astropy
% sudo pip3 install corner
% sudo pip3 install boto3
% sudo pip3 install requests

# Build Multinest
% cd Multinest/build
% rm -R CMake* src
% cmake ..
% make
% cd ../
% sudo cp lib/* /usr/local/lib
% export LD_LIBRARY_PATH=/mnt/shared/PyMultiNest/MultiNest/lib:$LD_LIBRARY_PATH

# test with:
% cd ../
% python3 pymultinest_demo.py

# test flashfinder
% cd ../linefinder/examples
# Edit "set_local_env.sh" to suit and add to user's .bashrc. Then:
% source ~/.bashrc
% sh local_script.sc

# make dirs for mounting external data:
% sudo mkdir /config
% sudo mkdir /data

% exit

# Above if done in Dockerfile can be built with:
#   docker build -t objectstore ./
#    
# save your image:
sudo docker ps -l
sudo docker commit <container_id> aussrc/flashfinder

# Push to DockerHub repo:
docker login --username=gordonwh # passwd = dh#....15
docker push aussrc/flashfinder

# now can run without the mounted host files:
sudo docker run  -it --user flash aussrc/flashfinder

# Or to enter container as root:
docker exec -it -u root aussrc/flashfinder bash


# Rerun with - mount data to /data, config to /config:
docker run -v /home/ger063/src/flash_data/testing/test_run/data/33616/spectra_ascii:/data -v /home/ger063/src/flash_data/testing/test_run/chains:/outputs --user flash -it aussrc/flashfinder

# Or with an entrypoint:
docker run --entrypoint $HOME/FLASH/pipeline/run_linefinder_absorption.sh -v /home/ger063/src/flash_data/testing/test_run/data/33616/spectra_ascii:/data -v /home/ger063/src/flash_data/testing/test_run/chains:/outputs --user flash -it aussrc/flashfinder

"Linefinder took 595.80 sec for 4 components"
#################################################################################
############ RUN IN SINGULARITY ################################################

# Build the sif - you may need to set SINGULARITY_DOCKER_USERNAME and SINGULARITY_DOCKER_PASSWORD

module load singularity
singularity build linefinder.sif docker://aussrc/flashfinder

# run a shell:
singularity shell --bind /mnt/shared/flash/data:/data,/mnt/shared/flash/config:/config linefinder.sif

# run a command in the container:
singularity exec --bind /mnt/shared/flash/data1:/data,/mnt/shared/flash/config1:/config linefinder.sif /home/flash/FLASH/pipeline/run_linefinder_absorption.sh

"Linefinder took 498.66 sec for 4 components"

##############################################################################
#  Concatenate all results files but only include header from 1st file:
find . -type f -name "results_*.dat" -exec awk 'NR==1 || FNR>1' {} + > 'results_all.txt'


find /data -type f -name "results_*.dat" -exec awk 'NR==1 || FNR>1' {} + > '/data/results$$_inverted_all.txt'

##############################################################################
############ STORE TO ACACIA, PRESIGNED URL GENERATION #######################

mc alias set acacia https://projects.pawsey.org.au cdeab391c04c41d289fe7e5fcebc8c39 238d5dfbb91741318c5c0bd7b9c3fa61

mc cp linefinder.sif acacia/aussrc/flash/linefinder.sif 

# In Python:

##############################################################################
########### Running locally in container #####################################

singularity shell --bind /scratch/ja3/ger063/data/sourceSpectra/45833/spectra_ascii:/data,/scratch/ja3/ger063/config:/config linefinder.sif

cd /home/flash/FLASH/pipeline
source set_local_env.sh
python3 $FINDER/flash_finder_NOMPI.py --out_path /data/outputs --data_path /data --sourcelog /config/sources.log --model_path /config/model.txt





